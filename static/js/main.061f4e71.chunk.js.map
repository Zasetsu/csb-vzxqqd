{"version":3,"sources":["Map/index.js","Map/utility.js","GeoJSONInput/index.js","App.js","reportWebVitals.js","index.js"],"names":["INITIAL_VIEW_STATE","longitude","latitude","zoom","height","width","Map","selectedH3Indices","onHexClick","useState","viewState","setViewState","h3Indices","north","south","east","west","resolution","nw","ne","sw","se","polyfill","getH3IndicesForBB","viewport","projection","WebMercatorViewport","unproject","bboxFromViewport","layers","H3HexagonLayer","id","data","pickable","wireframe","filled","extruded","elevationScale","getHexagon","d","autoHighlight","getLineColor","getFillColor","has","opacity","onClick","info","object","delete","add","Set","style","position","initialViewState","onViewStateChange","controller","mapboxApiAccessToken","sample","type","features","properties","geometry","coordinates","GeoJSONInput","onSubmit","geoJSONInput","setGeoJSONInput","Form","className","e","preventDefault","validJSON","replace","s","substring","length","pojo","JSON","parse","featureToH3Set","h3IndicesSet","FormGroup","Label","for","Input","value","onChange","target","placeholder","stringify","rows","cols","Button","disabled","color","App","setH3Indices","geoJson","multipolygon","geoJsonFormat","getGeoJson","h3SetToMultiPolygon","Array","from","Row","Col","join","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.061f4e71.chunk.js","sourcesContent":["import DeckGL from \"@deck.gl/react\"\nimport ReactMapGL from \"react-map-gl\"\nimport { H3HexagonLayer } from \"@deck.gl/geo-layers\"\nimport { useState } from \"react\"\nimport { object } from \"prop-types\"\n\nimport { bboxFromViewport, getH3IndicesForBB } from \"./utility\"\n\n// const token = process.env.REACT_APP_MAPBOX_TOKEN\nconst token =\n  \"pk.eyJ1Ijoic2VhbmJvcmFtbGVlIiwiYSI6ImNrbTJlcnFqejE3NGQydXFtZng1cXR4eGgifQ.oZ0mZBtUX5u72QTPtPITfA\"\n\nconst HEIGHT = 457\nconst WIDTH = 620\n\n// Viewport settings for Conservatory of Flowers\nconst INITIAL_VIEW_STATE = {\n  longitude: -122.4608452,\n  latitude: 37.7726669,\n  zoom: 18,\n  height: HEIGHT,\n  width: WIDTH\n}\n\nconst Map = ({ selectedH3Indices, onHexClick }) => {\n  const [viewState, setViewState] = useState(INITIAL_VIEW_STATE)\n\n  const boundingBox = bboxFromViewport(viewState)\n  const h3Indices = getH3IndicesForBB(boundingBox)\n\n  const layers = [\n    new H3HexagonLayer({\n      id: \"h3-hexagon-layer\",\n      data: h3Indices,\n      pickable: true,\n      wireframe: true,\n      filled: true,\n      extruded: true,\n      elevationScale: 0,\n      getHexagon: (d) => d,\n      autoHighlight: true,\n      getLineColor: [0, 0, 0],\n      getFillColor: (d) => {\n        const isSelected = selectedH3Indices.has(d)\n\n        // rgba - rgb=0, but a=1 to make the hex clickable\n        return isSelected ? [242, 141, 59, 50] : [0, 0, 0, 1]\n      },\n      opacity: 1,\n      //   onHover: (info) => console.log(\"hover\", info),\n      onClick: (info) => {\n        const isAlreadySelected = selectedH3Indices.has(info.object)\n\n        if (isAlreadySelected) {\n          selectedH3Indices.delete(info.object)\n        } else {\n          selectedH3Indices.add(info.object)\n        }\n\n        // Set is a mutable data structure so modifying won't trigger a state update\n        // so you have to create a new one - https://stackoverflow.com/questions/58806883/how-to-use-set-with-reacts-usestate\n        onHexClick(new Set(selectedH3Indices))\n      }\n    })\n  ]\n\n  return (\n    <DeckGL\n      style={{ position: \"relative\" }}\n      height={HEIGHT}\n      width={WIDTH}\n      initialViewState={viewState}\n      onViewStateChange={({ viewState }) => setViewState(viewState)}\n      controller={true}\n      layers={layers}\n    >\n      <ReactMapGL mapboxApiAccessToken={token} />\n    </DeckGL>\n  )\n}\n\nMap.propTypes = {\n  selectedH3Indices: object\n}\n\nexport default Map\n","import WebMercatorViewport from \"viewport-mercator-project\"\nimport { polyfill } from \"h3-js\"\n\n/**\n * Taken from https://stackoverflow.com/questions/56646664/how-can-i-get-the-h3-hexagons-on-a-react-map-gl-deck-gl-viewport\n *\n * @param {Object} viewport\n *\n * @returns - bounding box for the given viewport\n */\n\nexport function bboxFromViewport(viewport) {\n  const projection = new WebMercatorViewport(viewport)\n  const { height, width } = viewport\n\n  const [west, north] = projection.unproject([0, 0])\n  const [east, south] = projection.unproject([width, height])\n\n  return { north, south, east, west }\n}\n\n/**\n *\n * @param {Object} - bounding box dimensions\n * @param {Number} resolution - resolution of hexagons\n \n* @returns - an array of h3 indices within the given bounding box\n */\nexport function getH3IndicesForBB(\n  { north, south, east, west },\n  resolution = 12\n) {\n  const nw = [north, west]\n  const ne = [north, east]\n  const sw = [south, west]\n  const se = [south, east]\n\n  const hexes = polyfill([nw, ne, se, sw], resolution)\n\n  return hexes\n}\n\n/**\n *\n * @param {*} multipolygon\n * @returns\n */\n\nexport function getGeoJson(multipolygon) {\n  const geoJsonFormat = {\n    type: \"FeatureCollection\",\n    features: [\n      {\n        type: \"Feature\",\n        properties: {},\n        geometry: {\n          type: \"MultiPolygon\",\n          coordinates: multipolygon\n        }\n      }\n    ]\n  }\n\n  return JSON.stringify(geoJsonFormat)\n}\n","import React, { useState } from \"react\"\nimport { Label, Input, Button, FormGroup, Form } from \"reactstrap\"\nimport { featureToH3Set } from \"geojson2h3\"\n\nconst sample = {\n  type: \"FeatureCollection\",\n  features: [\n    {\n      type: \"Feature\",\n      properties: {},\n      geometry: {\n        type: \"MultiPolygon\",\n        coordinates: [\n          [\n            [\n              [-122.46092717828351, 37.77295937326589],\n              [-122.46104799726534, 37.77298276352059],\n              [-122.46113923694564, 37.77291042427848],\n              [-122.46110965773332, 37.77281469483032],\n              [-122.46120089718661, 37.772742355510026],\n              [-122.46117131797716, 37.77264662595473],\n              [-122.46105049945507, 37.772623235642094],\n              [-122.46102092038917, 37.77252750590202],\n              [-122.46090010192141, 37.77250411535596],\n              [-122.46087052299909, 37.77240838543109],\n              [-122.46074970458571, 37.772384994651595],\n              [-122.4606584648648, 37.77245733382589],\n              [-122.46068804364651, 37.77255306382838],\n              [-122.4605968036986, 37.772625402924525],\n              [-122.46047598487988, 37.772602011969504],\n              [-122.46038474461581, 37.7726743509388],\n              [-122.46041432325966, 37.772770080911755],\n              [-122.46053514230829, 37.77279347183781],\n              [-122.46056472109572, 37.77288920162597],\n              [-122.46068554019871, 37.77291259231859],\n              [-122.4607151191297, 37.773008321921985],\n              [-122.46083593828706, 37.773031712381155],\n              [-122.46092717828351, 37.77295937326589],\n            ],\n          ],\n        ],\n      },\n    },\n  ],\n}\n\nconst GeoJSONInput = ({ onSubmit }) => {\n  const [geoJSONInput, setGeoJSONInput] = useState(\"\")\n\n  function handleLoadFromJSON(e) {\n    e.preventDefault()\n\n    const validJSON = geoJSONInput.replace(/(\\w+:)|(\\w+ :)/g, function (s) {\n      return '\"' + s.substring(0, s.length - 1) + '\":'\n    })\n\n    const pojo = JSON.parse(validJSON)\n\n    const h3Indices = featureToH3Set(pojo, 12)\n    const h3IndicesSet = new Set(h3Indices)\n\n    onSubmit(h3IndicesSet)\n  }\n\n  return (\n    <Form className=\"w-100\" onSubmit={handleLoadFromJSON}>\n      <FormGroup>\n        <Label for=\"geojson-input\">Add GeoJSON</Label>\n        <Input\n          value={geoJSONInput}\n          onChange={(e) => setGeoJSONInput(e.target.value)}\n          placeholder={JSON.stringify(sample, null, 4)}\n          id=\"geojson-input\"\n          type=\"textarea\"\n          rows=\"9\"\n          cols=\"5\"\n        />\n      </FormGroup>\n      <Button disabled={!geoJSONInput} color=\"primary\">\n        Load from GeoJSON\n      </Button>\n    </Form>\n  )\n}\n\nexport default GeoJSONInput\n","import { useState } from \"react\"\nimport { h3SetToMultiPolygon } from \"h3-js\"\n\nimport { Row, Col, Container } from \"reactstrap\"\n\nimport Map from \"./Map\"\nimport { getGeoJson } from \"./Map/utility\"\nimport GeoJSONInput from \"./GeoJSONInput\"\n\nconst App = () => {\n  const [h3Indices, setH3Indices] = useState(new Set())\n\n  const coordinates = h3SetToMultiPolygon(Array.from(h3Indices), true)\n  const geoJson = getGeoJson(coordinates)\n\n  return (\n    <div className=\"App\">\n      <Row>\n        <Col className=\"m-2\">\n          <Map onHexClick={setH3Indices} selectedH3Indices={h3Indices} />\n        </Col>\n\n        <Col className=\"m-2\">\n          <Row>\n            <GeoJSONInput onSubmit={setH3Indices} />\n          </Row>\n\n          <Row className=\"m-2 d-flex flex-column\">\n            <h3>H3 Indices</h3>\n\n            <div>\n              <code>{Array.from(h3Indices).join(\",\")}</code>\n            </div>\n          </Row>\n\n          <Row className=\"m-2 d-flex flex-column\">\n            <h3>GeoJSON</h3>\n\n            <div>\n              <code>{geoJson}</code>\n            </div>\n          </Row>\n        </Col>\n      </Row>\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"mapbox-gl/dist/mapbox-gl.css\"\nimport \"bootstrap/dist/css/bootstrap.min.css\"\n\nimport \"./index.css\"\nimport App from \"./App\"\nimport reportWebVitals from \"./reportWebVitals\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}